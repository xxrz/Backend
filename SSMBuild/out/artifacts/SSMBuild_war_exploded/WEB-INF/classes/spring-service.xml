<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--    <import resource="classpath:spring-dao.xml"/>-->
    <!--1.扫描service下的包-->
    <context:component-scan base-package="com.test.service"/>

    <!--2.将我们的业务类注入到Spring，可以通过配置和注解实现-->
    <!--依赖注入：set注入
        依赖：bean对象的创建依赖于容器
        注入：bean对象中的所有属性，由容器来注入-->
    <bean id="BookServiceImpl" class="com.test.service.BookServiceImpl">
        <property name="bookMapper" ref="bookMapper"/>
    </bean>


    <!--3.声明类事务配置-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--注入数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!-- 6. 配置事务通知 -->
    <!--添加业务的方法-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--配置哪些方法使用什么样的事务,配置事务的传播特性。REQUIRED：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。-->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!-- 7. 配置aop织入事务 切入点-->
    <aop:config>
        <!--mapper下的所有方法都编入事务-->
        <aop:pointcut id="txPointcut" expression="execution(* com.test.dao.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

    <!--4.aop事务支持！-->

</beans>